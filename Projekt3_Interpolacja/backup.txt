def create_matrix(x0, nodes_y, x, y):
    n = len(x)
    A = np.zeros((8, 8))
    b = np.zeros((8, 1))
    z = np.zeros((8, 1))
    A[0, 0] = 1
    A[1, 0] = 1
    A[1, 1] = 2
    A[1, 2] = 4
    A[1, 3] = 8
    A[2, 4] = 1
    A[3, 4] = 1
    A[3, 5] = 2
    A[3, 6] = 4
    A[3, 7] = 8
    A[4, 1] = 1
    A[4, 2] = 4
    A[4, 3] = 12
    A[4, 5] = -1
    A[5, 2] = 2
    A[5, 3] = 12
    A[5, 6] = -2
    A[6, 2] = 2
    A[7, 6] = 2
    A[7, 7] = 12
    z[0] = nodes_y[x0]
    z[1] = nodes_y[x0+1]
    z[2] = nodes_y[x0+1]
    z[3] = nodes_y[x0+2]

    b = np.linalg.solve(A, z)

    return b
def spline_interpolation(nodes, nodes_x, nodes_y, x, y):
    results = x.copy()
    for i in range(0, len(nodes)-2, 2):
        b = create_matrix(i, nodes_y, x, y)
        for j in range(int(nodes[i]), int(nodes[i+1])):
            results[j] = (b[0] + b[1]*(x[j]-nodes_x[i]) + b[2]*(x[j]-nodes_x[i])**2 + b[3]*(x[j]-nodes_x[i])**3)
        for j in range(int(nodes[i+1]), int(nodes[i+2])):
            results[j] = (b[4] + b[5]*(x[j]-nodes_x[i+1]) + b[6]*(x[j]-nodes_x[i+1])**2 + b[7]*(x[j]-nodes_x[i+1])**3)
    return results